
name: Deploy Flex
run-name: "Deployed App: Flex ${{ inputs.environment || github.event.inputs.environment }}"
# Within this file, FEATURE and END FEATURE blocks are used only by the remove-features script.

on:
  # To run this workflow via automated triggers, see the .github/examples directory.

  # Enables running this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        required: true
        options:
          - staging_us
          - staging_uk
          - production_uk
          - production_us
        description: "Environment to use for deployment"
      initial_release:
        required: true
        type: boolean
        description: Is this the first release to the environment?
        default: false
      overwrite_config:
        required: true
        type: boolean
        default: false
        description: Overwrite config set by Admin UI Panel?

concurrency:
  group: flex-deploy-${{ inputs.environment || github.event.inputs.environment }}

jobs:

  approval:
    if: github.event.inputs.environment == 'production_us' ||  github.event.inputs.environment == 'production_uk'
    runs-on: ubuntu-latest
    steps:
      - uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.REPO_ACCESS_TOKEN }}
          approvers: paulsony13
          minimum-approvals: 1
          issue-title: "Deploying v1.3.5 to prod from staging"
          issue-body: "Please approve or deny the deployment of version v1.3.5."
          exclude-workflow-initiator-as-approver: false
  validate-flex-account:
    needs: 
      - approval
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4
      - name: setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

  # When performing an initial release
  # the serverless backend needs an initial deploy so
  # the domain name can be pulled in for the terraform deploy
  perform-initial-serverless-release:
    needs:
      - validate-flex-account
    if: |
      (inputs.initial_release == true)
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      ENVIRONMENT: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4
      - name: setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
  deploy-packages:
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      ENVIRONMENT: ${{ inputs.environment }}
    needs:
      - validate-flex-account
    steps:
      - uses: actions/checkout@v4
      - name: setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

  deploy-flex-config:
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ inputs.environment }}
      OVERWRITE_CONFIG: ${{ inputs.initial_release == true || inputs.overwrite_config == true }}
    needs:
      - deploy-packages
      - validate-flex-account
    steps:
      - uses: actions/checkout@v4
      - name: setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'


  deploy-release-plugin:
    needs:
      - validate-flex-account
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
      TWILIO_API_KEY: ${{ secrets.TWILIO_API_KEY }}
      TWILIO_API_SECRET: ${{ secrets.TWILIO_API_SECRET }}
      PLUGIN_FOLDER: plugin-flex-ts-template-v2
    steps:
      - uses: actions/checkout@v4
      - name: setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'